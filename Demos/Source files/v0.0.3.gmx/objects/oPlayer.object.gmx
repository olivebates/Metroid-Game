<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sPlayer</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*Custom variables*/
maxhspd = 2;        //max running speed
maxvspd = 20;       //max falling speed
acc = 0.5;          //acceleration speed (gliding effect) (Make it the same as maxhspd for instant movment)
jumpspd = -5.5;       //Jumping speed
gravity = 0.11;      //gravity.
maxjumps = 2;       //Amount of simutanious jumps allowed (double jumps). -2 = no jumping,  -1 = 1 jump,  0 = 2 jumps,  1 = 3 jumps,  ect.
jumpdeacc = 2;      //Amount of jumping speed your jumps decrease with every double jump. (The first 2 jumps will not be affected by this)(set 0 for no decrease)

frozen = false;     //at any given time in your game, you can change this to true, And the you will lose all control of the player. (best way to make cutscenes)

/*system variables (shouldn't change)*/
jumpsLeft = 1;          // this is how many jumps you have done. It is increased by 1 ever jump. when it reaches maxjumps, you cannot jump anymore. when you stand on the ground again, it is set to 0.
left = false;
right = false;
jump = false;
jumpPressed = false;
jumpRelease = false;
noJump = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
    
    //setting maximum falling speed.
    var maxspd = 5;
    if (vspeed &gt; maxspd || vspeed &lt; -maxspd) {
        vspeed = maxspd * sign(vspeed);
    }
    
    if (hspeed &gt; maxspd || hspeed &lt; -maxspd) {
        hspeed = maxspd * sign(hspeed);
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
if (frozen == false) {
    
    left = keyboard_check(ord("A"));
    right = keyboard_check(ord("D"));
    jump = keyboard_check(ord("W"));
    jumpPressed = keyboard_check_pressed(ord("W"));
    jumpRelease = keyboard_check_released(ord("W"));

    /*basic movment*/
    //Just for ducking, adding this next line.
    //running right
    if (!(hspeed &gt;= maxhspd)) {
        if (right) {
            image_xscale = 1;
            hspeed += acc*1.1;
        }
    }
    
    //running left
    if (!(hspeed &lt;= -maxhspd)) {
        if (left &amp;&amp; !right) {
            image_xscale = -1;
            hspeed -= acc*1.1;
        }
    }
    
    
    //reset the double jumps
    if (!place_free(x,y+1)) {
        jumpsLeft = maxjumps;
    }
    else if (vspeed != 0){
        jumpsLeft = min(maxjumps-1, jumpsLeft);
    }
    
    // No jump when ball is hooked
    if (noJump)
    {
        if (!instance_exists(oBallAndChain)) {
            // Jump on end
            if (jump) {
                if (jumpsLeft == 2) {
                    vspeed = jumpspd;
                } else if (jumpsLeft == 1) {
                    vspeed = jumpspd*0.8;
                }
                jumpsLeft --;
            }
            
            // Reset
            noJump = false;
        }
    //jump
    } else if (jumpPressed &amp;&amp; jumpsLeft &gt; 0) {
        if (jumpsLeft == 2) {
            vspeed = jumpspd;
        } else if (jumpsLeft == 1) {
            vspeed = jumpspd*0.8;
        }
        jumpsLeft --;
    }
    
    
    //reduce the player vertical velocity when he releases the jump key, if he's moving upwards
    if (vspeed&lt;0 &amp;&amp; jumpRelease) {
        vspeed*=0.5;
    }
    
    if (jumpsLeft == 0)
        image_blend = c_ltgray;
    else
        image_blend = c_white;
    
    /*Animations*/
    //so it wont override the duck animation
    
    if (!place_free(x,y+1)) {

        //on ground animations
        if (hspeed == 0) {
            image_speed = 0;
        } else {
                image_speed = 0.1;
        }
    } else {
        //in air animations
        if (vspeed &lt; 0) {
            image_single = 1;
        } else {
            image_single = 0;
        }
    }
    
    
    /*Anti bugging in wall*/
    //this scrip tlooks for the nearest free position, if the player somehow manages to glitch into a wall.
    if (place_meeting(x,y,oWallPar)) {
        var l, d, ls, ds, lm, f, fc;
        ls = 8 // radius step
        lm = 400 // max search radius
        ds = 15
        for (l = 0; l &lt; lm; l += ls)
        {
            fc = 0
            for (d = 0; d &lt; 360; d += ds)
            if place_free(x + lengthdir_x(l, d), y + lengthdir_y(l, d))
            {
                f[fc] = d
                fc += 1
            }
            if fc &gt; 0
            {
                d = floor(random(fc))
                x += lengthdir_x(l, f[d])
                y += lengthdir_y(l, f[d])
                exit
            }
        }
    }
    
    /*Controling*/
    
    // Deacceleratiion
    hfric = cos(0.5);
    //hspeed -= min(abs(hfric),abs(hspeed)) * sign(hspeed) * sign(hfric);
    if (hspeed &gt; 0)
        hspeed -= min(hspeed, 0.2);
        
    if (hspeed &lt; 0)
        hspeed -= max(hspeed, -0.2);
        
    vspeed *= 0.985;
    
    // Delta
    hspeed *= delta();
}

/*
// Anti lag
instance_deactivate_all(true);
instance_activate_region(oPlayer.x - 1000, oPlayer.y - 600, oPlayer.x + 1000, oPlayer.y + 600, true)

// Keys
if (keyboard_check(vk_left))            left = true;    else left = false;
if (keyboard_check(vk_right))           right = true;   else right = false;
if (keyboard_check(vk_up))              jump = true;    else jump = false;

// Movement
if (left) {
    hspeed = -1.8;
}
else if (right) {
    hspeed = 1.8;
}
else {
    hspeed = 0;
}

// Animation
image_speed = hspeed/20;
if (vspeed &lt; 0)
    image_single = 1;
else if (vspeed &gt; 0)
    image_single = 0;

// Jump
if (place_meeting(x, y+1, oWall))
{
    onFloor = 8;
}
else if (onFloor &gt; 0)
{
    onFloor -= 1;
}

if (jump)
{
    if (!jumphold &amp;&amp; onFloor) 
    {
        // Apply jump force
        jumphold = true;
        onFloor = 0;
        vspeed -= jumpspd;
    }
}
else
{
    if (vspeed &lt; 0 &amp;&amp; jumphold)
    {
        vspeed *= .5;
    }
    jumphold = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oWallPar">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!place_free(x + hspeed, y))
{
    move_contact_solid(direction, speed);
    hspeed = 0;
}
if (!place_free(x, y + vspeed))
{

    if (vspeed &gt; 0 &amp;&amp; variable_instance_exists(other, "jumpable") &amp;&amp; other.jumpable == true) {
        // Jump destroy
        vspeed = min(-vspeed, jumpspd);
        audio_play_sound(sndEnemyDie, 1, 0);
        with (other)
            instance_destroy();
    }
    else
    {
        move_contact_solid(direction, speed);
        vspeed = 0;
    }
}
if (!place_free(x + hspeed, y) &amp;&amp; !place_free(x, y + vspeed))
{
    move_contact_solid(direction, speed);
    vspeed = 0;
    hspeed = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="54">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(oBallAndChain)){
    instance_create(x, y, oBallAndChain);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
